<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MPC_Tracking_Biofish</title>
      <link href="/2022/09/21/MPC-Tracking-Biofish/"/>
      <url>/2022/09/21/MPC-Tracking-Biofish/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference: Model predictive tracking control design for a robotic fish with controllable barycentre.</p></blockquote><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>This paper presents the dynamic modeling and MPC for a fin-actuated robot with a barycentre regulating mechanism in multiple motions. This paper contributes to trajectory tracking for an underwater robot with a controllable barycentre in multiple motions, which has been rarely explored.</p><span id="more"></span><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>For underwater robots including ROV, AUV and bio-inspired underwater robots, how to precisely control the robots for tracking a given trajectory has always been a focus and difficulty and has attracted increasing attention. The robots in recent literature only conduct surface motion, without complex motions in 3D space. Besides, the robots have constant mass distributions, and it is more challenging for motion control underwater robots with interval moving mass.</p><p>This paper focuses on investigating MPC for a robotic fish with a barycentre regulating mechanism in multiple motions. The main work contains:</p><ul><li>A dynamic model of the robotic fish is established </li><li>A MPC algorithm is formulated to explore trajectory tracking</li><li>Simulations of tracking rectangle trajectory, sine-like trajectory, ascending trajectory and spiral trajectory were conducted.</li></ul><h1 id="The-Robotic-Fish-with-the-Barycentre-Regulating-Mechanism"><a href="#The-Robotic-Fish-with-the-Barycentre-Regulating-Mechanism" class="headerlink" title="The Robotic Fish with the Barycentre Regulating Mechanism"></a>The Robotic Fish with the Barycentre Regulating Mechanism</h1><p>The structure of the robot is shown below. Motor 1 is used to generate propulsive force. Motor 2 is used for rotating the bracket and motor 3 is used to make the weight move along the direction parallel to the principal axis of the robotic fish.<br><img src="/images/MPC_COG/fig1.png" alt><br>For the 6-DOF motions of the robot fish, they can be expressed as:</p><script type="math/tex; mode=display">M\dot{v}+C(v)v=\tau\tag{1}</script><p>where $v=[v_b, \omega_b]^T$ is the body-fixed linear and angular velocity.<br>The M takes the following form:</p><script type="math/tex; mode=display">\mathbf{M}=\left[\begin{array}{cccccc}m & 0 & 0 & 0 & m z_{C_{m}} & -m y_{C_{m}} \\0 & m & 0 & -m z_{C_{m}} & 0 & m x_{C_{m}} \\0 & 0 & m & m y_{C_{m}} & -m x_{C_{m}} & 0 \\0 & -m z_{C_{m}} & m y_{C_{m}} & J_{x x} & -J_{x y} & -J_{x z} \\m z_{C_{m}} & 0 & -m x_{C_{m}} & -J_{y x} & J_{y y} & -J_{y z} \\-m y_{C_{m}} & m x_{C_{m}} & 0 & -J_{z x} & -J_{z y} & J_{z z}\end{array}\right]</script><p>And C takes the following form:</p><script type="math/tex; mode=display">\mathbf{C}(\mathbf{v})=\left[\begin{array}{cc}\mathbf{0}_{3 \times 3} & -m \mathbf{S}\left(\mathbf{v}_{\mathbf{b}}\right)-m \mathbf{S}\left(\omega_{\mathbf{b}}\right) \mathbf{S}\left(\mathbf{r}_{\mathbf{C}_{\mathbf{m}}}\right) \\-m \mathbf{S}\left(\mathbf{v}_{\mathbf{b}}\right)+m \mathbf{S}\left(\mathbf{r}_{\mathbf{C}_{\mathbf{m}}}\right) \mathbf{S}\left(\omega_{\mathbf{b}}\right) & -\mathbf{S}\left(\mathbf{J} \omega_{\mathbf{b}}\right)\end{array}\right]</script><p>The concrete form of the force is shown below, where $F_{xb}, F_{yb}, F_{zb}$ are components of the total force. $M_{xb}, M_{yb}, M_{zb}$ are components of the total torque. More information can be found in [1].<br><img src="/images/MPC_COG/equ1.png" alt></p><h1 id="MPC-structure"><a href="#MPC-structure" class="headerlink" title="MPC structure"></a>MPC structure</h1><p>Eq.(1) can be reformulated as:</p><script type="math/tex; mode=display">\dot{v}=M^{-1}\tau-M^{-1}C(v)v</script><p>So we can rearrange the fomular as:</p><script type="math/tex; mode=display">\dot{\vec{q}}(t)=f(\vec{q}(t), \vec{u}(t)), t \geq 0</script><p>Where $\vec{q}$ is the vector of state variable, $\vec{u}(t)$ indicates the control input. Then we can define the cost function:</p><script type="math/tex; mode=display">J(q(\tau),U_(\tau))=\int_{t}^{t+T_p}( \left\|\bar{y}_{c}(\tau)-d(\tau)\right\|_{\mathbf{Q}}^{2})d\tau</script><p>Where $\bar{y}_c(\tau)$ is the control output, $d(\tau)$ is the desired control output and $Q$ is the weight matrix. Using this optimal function we can get the optimal input $u(t)$</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This paper uses the dynamic model of a robotic fish with a controllable barycentre combined with nonlinear MPC to conduct 3D trajectory tracking. The MPC exploited in this paper is a nonlinear continous MPC, which may be not fast enough to control robotic fish in real time.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1] Three-Dimensional Dynamic Modeling and Motion Analysis for an Active-Tail-Actuated Robotic Fish with Barycentre Regulating Mechanism</p>]]></content>
      
      
      <categories>
          
          <category> Paper notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MPC </tag>
            
            <tag> Biofish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MPC_CPG_Biofish</title>
      <link href="/2022/09/20/MPC_CPG_Biofish/"/>
      <url>/2022/09/20/MPC_CPG_Biofish/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference: Bionic Fish Trajectory Tracking Based on a CPG and Model Predictive Control</p></blockquote><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>In this paper, the nonlinear dynamic model of bionic fish is established by the Newton-Euler equation and D-H coordinate transformation, and it is reasonably simplified. Then a model predictive controller is established based on the dynamic model and combined with a CPG network. Finally, simulations and experiments are carried out on the bionic fish, tracking the circular trajectory and straight trajectory.<br><span id="more"></span></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>At present, there are few studies on the trajectory tracking control of bionic fish. Wang Ming et al. used an iterative learning method to control the trajectory tracking of bionic fish and conducted simulation verification[1]. Zheng XW et al. established a dynamic model of a bionic fish with a center of gravity adjustment mechanism and a multimovement fin drive mechanism. Based on the dynamic model, trajectory tracking was carried out through MPC[2]. Aiming at the trajectory tracking problem of bionic fish, this paper uses an MPC as the upper trajectory tracking controller and CPG as the bottom motion controller. The main contributions are as follows:</p><ol><li>We established a nonlinear dynamic model of a bionic fish through the Newton-Euler equation and D-H coordinate and then simplified the dynamic model.</li><li>Then an MPC controller was established and combined with the CPG network, and an MPC-CPG controller was proposed.</li><li>Simulations and prototype experiments were performed to verify the effectiveness of the proposed controller.</li></ol><h1 id="Bionic-Fish-Design-and-Modeling"><a href="#Bionic-Fish-Design-and-Modeling" class="headerlink" title="Bionic Fish Design and Modeling"></a>Bionic Fish Design and Modeling</h1><h2 id="Overview-of-the-Bionic-Fish"><a href="#Overview-of-the-Bionic-Fish" class="headerlink" title="Overview of the Bionic Fish"></a>Overview of the Bionic Fish</h2><p>As shown below, the bionic shark only retains the tail fin and a pair of pectoral fins as the motion actuators, which are driven by three servo motors. The core controller consists of an NVIDIA development board equipped with a ROS system and an STM32 microcontroller.<br><img src="/images/MPC_CPG/fish.png" alt><br>The following table lists detailed technical parameters of the bionic fish.<br><img src="/images/MPC_CPG/table1.png" alt></p><h2 id="Nonlinear-Dynamic-model-of-the-Bionic-Fish"><a href="#Nonlinear-Dynamic-model-of-the-Bionic-Fish" class="headerlink" title="Nonlinear Dynamic model of the Bionic Fish"></a>Nonlinear Dynamic model of the Bionic Fish</h2><script type="math/tex; mode=display">\begin{aligned}m \ddot{y}=&-\left[a_{1} c H k_{1}^{x} k_{1}^{y}+\left(a_{2} c H k_{\lambda_{4}}^{x}+a_{3} c H k_{\lambda_{1}}^{x}\right) k_{\lambda_{1}}^{y}+a_{4} c H k_{\lambda_{2}}^{x} k_{\lambda_{2}}^{y}\right] \dot{x} \omega \quad(1) \\m \ddot{x}=&-\left[a_{1} c H\left(k_{1}^{x}\right)^{2}+\left(a_{2} c H k_{\lambda_{4}}^{x}+a_{3} c H k_{\lambda_{1}}^{x}\right) k_{\lambda_{1}}^{x}+a_{4} c H\left(k_{\lambda_{2}}^{x}\right)^{2}\right] \dot{x} \omega \\I_{z} \ddot{\varphi}=&-a_{5} \dot{x} \dot{\varphi}-a_{1} c H\left(L_{1}-0.5 L_{1} b^{2}+L_{5}\right) \dot{x} \omega b \\&-\left(a_{2} c H \lambda_{4}+a_{3} c H \lambda_{1}\right)\left[L_{1}+L_{2}+L_{6}-\left(0.5 L_{1} \lambda_{1}^{2}+0.5 L_{2} i_{1}^{2}\right) b^{2}\right] \dot{x} \omega b \\&-a_{4} c H \lambda_{2}\left[L_{1}+L_{2}+L_{3}+L_{7}-\left(0.5 L_{1} \lambda_{2}^{2}+0.5 L_{2} \lambda_{3}^{2}+0.5 L_{3} i_{2}^{2}\right) b^{2}\right] \dot{x} \omega b \\\dot{Y}=& \dot{x} \sin \varphi+\dot{y} \cos \varphi \\\dot{X}=& \dot{x} \cos \varphi-\dot{y} \sin \varphi\end{aligned}</script><h1 id="Problem-Formulation"><a href="#Problem-Formulation" class="headerlink" title="Problem Formulation"></a>Problem Formulation</h1><h2 id="CPG-Model-of-the-Bionic-Fish"><a href="#CPG-Model-of-the-Bionic-Fish" class="headerlink" title="CPG Model of the Bionic Fish"></a>CPG Model of the Bionic Fish</h2><p>This paper uses the Hopf oscillators at the basic unit of the CPG to construct the underlying motion control network.</p><script type="math/tex; mode=display">\begin{aligned}\dot{x_{i}}=&-\omega_{i}\left(\beta_{i}-b_{i}\right)+k \alpha_{i}\left(H_{i}^{2}-\alpha_{i}^{2}-\left(\beta_{i}-b_{i}\right)^{2}\right) \\&+h_{i}\left(\alpha_{i-1} \cos \phi_{i}+\left(\beta_{i-1}-b_{i-1}\right) \sin \phi_{i, i-1}\right) \\ \dot{y_{i}} =& \omega_{i} \alpha_{i}+k\left(\beta_{i}-b_{i}\right)\left(H_{i}^{2}-\alpha_{i}^{2}-\left(\beta_{i}-b_{i}\right)^{2}\right) \\&+h_{i+1}\left(\alpha_{i+1} \sin \phi_{i+1}+\left(\beta_{i+1}-b_{i+1}\right) \cos \phi_{i, i+1}\right)\end{aligned}</script><p>Where $\alpha_i,\beta_i$ are state variables of the i-th oscillator. $\omega_i, H_i$ represents the oscillation frequency and amplitude. $h_i, \phi_i$ represent the coupling factor and phase difference. $b_i$ represents the offset of state variable $\beta_i$ in the i-th oscillator.</p><p>The CPG network is shown below. The output signals of the CPG are transmitted to the left pectoral fin, right pectoral fin and caudal fin the bionic fish. The upper controller adjusts the frequency and offset of the CPG network in real time. And by changing the frequency and offset of the pectoral fin and caudal fin, the swimming speed and angular velocity are controlled.</p><h2 id="Design-of-the-MPC"><a href="#Design-of-the-MPC" class="headerlink" title="Design of the MPC"></a>Design of the MPC</h2><p>To ensure smoothness in the motion control process, this paper combines MPC and CPG to adjust the swimming gait in real time.</p><h3 id="Error-Model"><a href="#Error-Model" class="headerlink" title="Error Model"></a>Error Model</h3><p>Eq.(1) shows that the system can be regarded as a control system with a control quantity $u(\omega, b)$ and a state quantity $\chi(\dot{y}, \dot{x}, \varphi, \dot{\varphi}, Y, X)$. The general form is </p><script type="math/tex; mode=display">\dot{\chi}=f(\chi, u)</script><p>The reference trajectory satisfies the above equation, and the subscript $r$ is used to represent the reference quantity. So</p><script type="math/tex; mode=display">\dot{\chi_r}=f(\chi_r, u)</script><p>We can use a Taylor series at the reference trajectory point and ignore the higher-order terms then yield:<br><img src="/images/MPC_CPG/equation14.png" alt></p><p>After subtracting the above two equations, we can get an error model:</p><script type="math/tex; mode=display">\dot{\tilde{\chi}}=\dot{\chi}-\dot{\chi}_{r}=\boldsymbol{A}(t) \dot{\tilde{\chi}}+\boldsymbol{B}(t)  \dot{\tilde{u}}</script><p>Then we discretize the model to get a discrete linear error model:</p><script type="math/tex; mode=display">\widetilde{\chi}(k+1)=\boldsymbol{A}_{k, t} \widetilde{\boldsymbol{\chi}}(k)+\boldsymbol{B}_{k, t} \widetilde{\boldsymbol{u}}(k)</script><p>Where $A_{k, t}=I+TA(t). B_{k, t}=TB(t)$, and T is the sampling time.</p><h3 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h3><p>The cost function takes this form:</p><script type="math/tex; mode=display">\begin{aligned}J(k)=& \sum_{i=1}^{N_{\mathrm{p}}}\left\|\boldsymbol{\eta}(k+i \mid t)-\boldsymbol{\eta}_{\mathrm{r}}(k+i \mid t)\right\|_{Q}^{2} \\&+\sum_{i=1}^{N_{c}-1}\|\Delta \boldsymbol{U}(k+i \mid t)\|_{R}^{2}\end{aligned}</script><p>where $N_p$ is the prediction horizon and $N_c$ is the control horizon. We can substitute the dynamic equation into the cost function and use QP to solve the optimal control sequence. The whole structure of the control system is shown below:<br><img src="/images/MPC_CPG/fig6.png" alt></p><h3 id="Stability-Proof"><a href="#Stability-Proof" class="headerlink" title="Stability Proof"></a>Stability Proof</h3><p>The detailed formulation in the paper.</p><h1 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h1><p>The robot can track a circle trajectory and a line trajectory.</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This paper establishes an MPC-CPG model to control a bio fish. The outputs of MPC are used to tune the parameters of the CPG. However, when calculating the dynamic equation of CPG and the robot, the MPC controller does not take the converge time into account.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1] Trajectory tracking control of a bionic robotic fish based on iterative learning</p><p>[2] Model predictive tracking control design for a robotic fish with controllable barycentre.</p>]]></content>
      
      
      <categories>
          
          <category> Paper notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPG </tag>
            
            <tag> MPC </tag>
            
            <tag> Biofish </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Control_of_Biofish</title>
      <link href="/2022/09/19/Control-of-Biofish/"/>
      <url>/2022/09/19/Control-of-Biofish/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference: Locomotion control of a biomimetic robotic fish based on closed loop sensory feedback CPG model</p></blockquote><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>This paper presents the hierarchical locomotion control of a biomimetic robotic fish. A closed-loop CPG model with a closed-loop fuzzy logic control is developed to provide a robust control structure and decide adaptive swimming modes according to the sensor information.<br><span id="more"></span></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>When swimming robots are investigated in the literature, it can be seen that many different CPG-based locomotions are used. These controllers can be divided into two main categories: open-loop and closed-loop CPG models. When it comes to closed-loop CPG-based controllers, examples are not quite much on robot fish. Wang et al. performed trajectory tracking control by changing amplitude, offset and frequency[1]. Zhang et al. developed a robotic fish and examined both BCF and MPF motions with Hopf oscillators[2].</p><p>The main contribution of this paper is to develop a hierarchical control mechanism based on a closed-loop sensory feedback CPG model to perform real-time three-dimensional multimodal swimming motions. The structure of the control system contains:</p><ul><li>CPG-based on Lamprey spinal cord.</li><li>Sensory neuron mechanism to percieve external stimuli from environment</li><li>Fuzzy logic controller for determination of swimming pattern.</li><li>CoG control mechanism for up/down motions.</li></ul><h1 id="Mechatronic-design-of-the-robotic-fish-prototype"><a href="#Mechatronic-design-of-the-robotic-fish-prototype" class="headerlink" title="Mechatronic design of the robotic fish prototype"></a>Mechatronic design of the robotic fish prototype</h1><h2 id="Mechanical-design"><a href="#Mechanical-design" class="headerlink" title="Mechanical design"></a>Mechanical design</h2><p>As shown below, the robot consists of a rigid main body, two-link propulsive tail mechanism, front sight unit and a flexible caudal fin.<br><img src="/images/biofish/fish.png" alt></p><h2 id="Electronics-and-sensors"><a href="#Electronics-and-sensors" class="headerlink" title="Electronics and sensors"></a>Electronics and sensors</h2><ul><li>Battery: 7.4V 1350mAh Li-Po rechargeable battery</li><li>Bluetooth HC-06</li><li>IMU</li><li>ARM Cortex M4 microcontroller</li><li>Infrared Sharp GP2Y0A21YK0F</li></ul><p>The robotic fish is 500 mm long, 76 mm wide and 215 mm high. The prototype mass is approximately 3.1kg.</p><p><img src="/images/biofish/electronics.png" alt></p><h1 id="Framework-of-the-hierarchical-locomotion-control"><a href="#Framework-of-the-hierarchical-locomotion-control" class="headerlink" title="Framework of the hierarchical locomotion control"></a>Framework of the hierarchical locomotion control</h1><p>In the frame, the proposed CPG model is designed based on Lamprey spinal cord to provide rhythmic, coordinated and stable BCF swimming motions. A sensory neuron mechanism is adapted to CPG to perceive external stimuli with onboard sensors. The closed loop fuzzy logic controller is also developed to determine necessary swimming patterns according to sensory information<br><img src="/images/biofish/control.png" alt></p><h2 id="CPG-Based-biomimetic-spinal-cord-model"><a href="#CPG-Based-biomimetic-spinal-cord-model" class="headerlink" title="CPG-Based biomimetic spinal cord model"></a>CPG-Based biomimetic spinal cord model</h2><p>In the oscillator model, the interneurons occur from a series of Leaky Integrate and Fire (LIF) cells.</p><h2 id="Sensory-feedback-mechanism"><a href="#Sensory-feedback-mechanism" class="headerlink" title="Sensory feedback mechanism"></a>Sensory feedback mechanism</h2><p>The environmental data obtained by the sensors during the swimming of the robotic fish are evaluated and the λ parameter which is the stimulus input of the SN is decided by the necessary fuzzy controller according to the robotic fish locomotion determined by the decision mechanism.</p><h1 id="Closed-loop-control-structure"><a href="#Closed-loop-control-structure" class="headerlink" title="Closed loop control structure"></a>Closed loop control structure</h1><p><img src="/images/biofish/closed_loop.png" alt></p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In this paper, a hierarchal closed-loop control structure is designed and the three-dimensional locomotion of the robotic fish prototype is presented. The hierarchal control structure is developed by using a CPG, fuzzy logic and sensory feedback mechanism. The CPG model is inspired by the biological features of the Lamprey spinal cord to generate rhythmic, robust and stable locomotion for effective swimming patterns.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1] CPG-based locomotion controller design for a boxfish-like robot.</p><p>[2] Design and control of an agile robotic fish with integrative biomimetic mechanisms.</p>]]></content>
      
      
      <categories>
          
          <category> Paper notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPG </tag>
            
            <tag> Biofish </tag>
            
            <tag> Closed-loop </tag>
            
            <tag> Fuzzy control </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Closed-loop_CPG_Direction_Tracking</title>
      <link href="/2022/09/19/Closed-loop-CPG-Direction-Tracking/"/>
      <url>/2022/09/19/Closed-loop-CPG-Direction-Tracking/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference: Bioinspired Closed-loop CPG-based Control of a Robot Fish for Obstacle<br>Avoidance and Direction Tracking</p><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>This paper presents a study on closed-loop CPG-based control of a robot fish for obstacle avoidance and direction tracking. The CPG model consists of four input parameters: the flapping amplitude, the flapping angular velocity, the flapping offset, and the time ratio between the phase and the restore phase in flapping. The sensors on the fish are three infrared sensors(IR) mounted on the left, front and right of the robot fish as well as an IMU. Four sets of experiments are presented, including avoiding a static obstacle, avoiding a moving obstacle, tracking designated directions and tracking a designated direction with an obstacle in the path.<br><span id="more"></span></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>CPG is the natural way to generate rhythmic motion control signals. The combination of closed-loop and CPG on the robot is a novel way for improving propulsion efficiency and maneuverability. Yu et al. developed a CPG-based multi-joint robot fish with visual feedback control for avoiding obstacles and searching for tasks[1]. Korkmaz et al. tried to combine CPG, fuzzy logic and sensory feedback to control a robot fish with two links and conducted yaw and pitch control experiments[2]. Wang and Xie advanced a closed-loop CPG controller for the yaw and roll control of a boxfish-like robot[3]. Zhang et al. combined the advantages of inset wings and fish fins to achieve an agile robotic fish and designed a CPG model for obstacle avoiding[4]. Among these robot fishes, the active bodies are single-joint or multi-joint designs. However, there are few studies of closed-loop CPG control on robot fish with the wire-driven active body. The objective of this paper is to develop a closed-loop CPG-based control for obstacle avoidance.</p><h1 id="Design-of-the-robot-fish"><a href="#Design-of-the-robot-fish" class="headerlink" title="Design of the robot fish"></a>Design of the robot fish</h1><h2 id="Mechanical-design"><a href="#Mechanical-design" class="headerlink" title="Mechanical design"></a>Mechanical design</h2><p>The robot fish comprises three parts, namely a rigid head, a wire-driven active body, and a compliant tail. The rigid head is used to install electronic components, such as circuit board, battery and sensors. A pair of pectoral fins attached to the shaft control the ascent and descent of the robot fish. The active body has four links in which two spring plates are embedded. The compliant tail is fixed onto the last link.<br><img src="/images/wirefish/mechanical.png" alt></p><h2 id="Electronics"><a href="#Electronics" class="headerlink" title="Electronics"></a>Electronics</h2><ul><li>Battery: 7.4 V 1500mAH Ni-H battery.</li><li>Microcontroller: STM32F104</li><li>Radio Frequency wireless module: E62-433T20D</li><li>Pectoral fin: HS-5086WP sevomotor</li><li>Active body: SW-1210SG</li></ul></blockquote><h1 id="Closed-loop-CPG-based-control-structure-design"><a href="#Closed-loop-CPG-based-control-structure-design" class="headerlink" title="Closed-loop CPG-based control structure design"></a>Closed-loop CPG-based control structure design</h1><h2 id="CPG-control"><a href="#CPG-control" class="headerlink" title="CPG control"></a>CPG control</h2><p>The equations  are as follows:</p><script type="math/tex; mode=display">\begin{aligned}\ddot{b} &=k_{b}\left(0.25 k_{b}(B-b)-\dot{b}\right) \\\ddot{m} &=k_{m}\left(0.25 k_{m}(M-m)-\dot{m}\right), \\\dot{\phi} &=\left[\frac{(1+R)^{2}}{4 R}-\frac{R^{2}-1}{4 R} \operatorname{sign}(\sin \phi)\right] \omega, \\\alpha &=b+m \cos (\phi) \\\beta &=b+m \sin (\phi)\end{aligned}</script><p>where $M, B, \omega, R$ are four input parameters, and $\alpha$ is the only output parameter for controlling the flapping patterns of the active body.$R$ is time ratio between the restore phase and beat phase.</p><h2 id="Closed-loop-CPG-based-control"><a href="#Closed-loop-CPG-based-control" class="headerlink" title="Closed-loop CPG-based control"></a>Closed-loop CPG-based control</h2><p>The frame of the closed-loop CPG control system is shown below:<br><img src="/images/wirefish/Control.png" alt><br>On the whole picture, the control system uses IR sensors data and IMU data to change the parameter of CPG’s input, namely $M, \omega, B, R$ and the pitch angle of pectoral fin.</p><h3 id="Closed-loop-control-for-obstacle-avoidance"><a href="#Closed-loop-control-for-obstacle-avoidance" class="headerlink" title="Closed-loop control for obstacle avoidance"></a>Closed-loop control for obstacle avoidance</h3><p>Using the IR sensors, we can set a table of values to change the behaviors of CPG facing different situations. The table is shown below:<br><img src="/images/wirefish/table.png" alt></p><h3 id="Closed-loop-control-for-direction-tracking"><a href="#Closed-loop-control-for-direction-tracking" class="headerlink" title="Closed-loop control for direction tracking"></a>Closed-loop control for direction tracking</h3><p>From the frame of the control system, the input of direction tracking is the target yaw angle, and the feedback signal is the real-time yaw angle from IMU. However, the body is constantly swinging along with the approximate sinusoidal oscillation. We need a low-pass filter to get the real yaw angle. In the paper, they set $M,\omega,R$ to be $20, 2\pi, 1$ respectively. The yaw angle is obtained in the following equation:</p><script type="math/tex; mode=display">\begin{array}{c}\theta(t)=\frac{1}{N} \sum_{i=1}^{N} \theta_{i}(t) \\N=\frac{2 \pi}{\omega} f\end{array}</script><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In this paper, they propose a closed-loop CPG system to conduct obstacle avoidance and direction tracking. The feedback signal comes from three IR sensors and an IMU sensor. In all, after getting the dynamic of the robot, we can set parameters through target and feedback to modulate the behavior of CPG.</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1] Design and control of an embedded vision guided robot fish with multiple control surfaces<br>[2] Locomotion control of a biomimetic robot fish based on closed loop sensory feedback CPG model.<br>[3] CPG-based locomotion controller design for a boxfish-like robot.<br>[4] Design and control of an agile robotic fish with integrative biomimetic mechanisms.</p>]]></content>
      
      
      <categories>
          
          <category> Paper notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPG </tag>
            
            <tag> Biofish </tag>
            
            <tag> Closed-loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPG_Boxfish</title>
      <link href="/2022/09/13/CPG4Boxfish/"/>
      <url>/2022/09/13/CPG4Boxfish/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference : CPG-based Locomotion Controller Design for a Boxfish-like Robot</p></blockquote><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>This paper focuses on a Central Pattern Generator-based locomotion controller design for a boxfish-like robot. The controller aims at flexible switching in multiple 3D swimming patterns and exact attitude control of yaw and roll such that the robot will swim more like a real boxfish. The CPG network comprises two layers, the lower layer is the network of coupled linear oscillators and the upper layer is the transition layer where locomotion stimuli are transformed into the higher-dimensional control parameters. The stability of the CPG network is proven to guarantee the stability of swimming patterns. In order to exact attitude control, based on this open-loop CPG network and the sensory feedback from IMU, a closed-loop CPG controller is advanced for yaw and roll control.<br><span id="more"></span></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Conventional locomotion controllers need to model the dynamics of the robot, which in most cases is too complicated to be established. Therefore, more researchers have taken inspiration from animal locomotion one of which is CPG.</p><p>Research on the CPG-based can be divided into two categories: open-loop CPG and closed-loop CPG. Open-loop CPG controllers are always employed to generate multiple swimming behaviors and to realize smooth transitions between those related behaviors. In contrast, closed-loop CPG controllers integrate sensory feedback into the CPG network to regulate the CPG behaviors.</p><p>This paper aims at designing a CPG-based locomotion controller, which endows the robot with abilities in flexible switching among multiple 3D swimming patterns and exact attitude control of the yaw and roll of the robot. The main contributions are: </p><ol><li>By importing  a transition layer, we use an open-loop CPG network to generate all typical 3D swimming patterns with for parameters. </li><li>The stability of the CPG model is proven to ensure the intrinsic stability of swimming patterns. </li><li>By employing sensory feedback from IMU, the paper proposes a closed-loop CPG controller to realize automatic control in the yaw and roll angles while swimming.<h1 id="Prototype-of-the-Boxfish-like-Robot"><a href="#Prototype-of-the-Boxfish-like-Robot" class="headerlink" title="Prototype of the Boxfish-like Robot"></a>Prototype of the Boxfish-like Robot</h1></li></ol><p>The figure below shows the mechanical configurations of the boxfish robot consisting of a roughly rectangular main body, a pair of pectoral fins and a caudal fin.<br><img src="/images/CPG4Boxfish/box_fish.png" alt><br>The robot is operated by an embedded Linux system and can work in two control modes: the manual mode and the autonomous model. In the manual mode, the robot is dominated by a remote controller via WiFi while in autonomous mode, the robot is able to swim by using its onboard sensor: the IMU and the camera.</p><h1 id="CPG-based-Locomotion-Control"><a href="#CPG-based-Locomotion-Control" class="headerlink" title="CPG-based Locomotion Control"></a>CPG-based Locomotion Control</h1><p>This section contains:</p><ul><li>Simplified dynamic analysis of robotic fish</li><li>Propose a two-layer CPG controller<br>Validity of the stability of the CPG model</li><li>Propose a closed-loop CPG to realize automatic attitude control</li></ul><h2 id="Simplified-Dynamic-Analysis"><a href="#Simplified-Dynamic-Analysis" class="headerlink" title="Simplified Dynamic Analysis"></a>Simplified Dynamic Analysis</h2><p>In short, the robot has 8 modes which are moving forward, moving backward, turning,  pitching, rolling, braking and so on. More detail can be found in[1,2]<br><img src="/images/CPG4Boxfish/fish_moving.png" alt></p><h2 id="Two-layer-Open-loop-CPG-Controller"><a href="#Two-layer-Open-loop-CPG-Controller" class="headerlink" title="Two-layer Open-loop CPG Controller"></a>Two-layer Open-loop CPG Controller</h2><p>This paper linearize the nonlinear phase oscillator in [3] which reads:</p><script type="math/tex; mode=display">\begin{aligned}\dot{a}_{i} &=\alpha_{i}\left(A_{i}-a_{i}\right) \\\dot{x}_{i} &=\beta_{i}\left(X_{i}-x_{i}\right) \\\dot{\phi}_{i} &=2 \pi f_{i}+\sum_{j \in T_{i}} \mu_{i j}\left(\phi_{j}-\phi_{i}-\varphi_{i j}\right) \\\theta_{i} &=x_{i}+a_{i} \cos \left(\phi_{i}\right)\end{aligned}</script><p>In order to reduce the complicatedness of swimming pattern switching, a two-layer CPG network is proposed, as shown below.<br><img src="/images/CPG4Boxfish/CPG.png" alt></p><p>The input drive received four commands from the upper controller. The $d_v$ is the robot speed. The $d_y, d_p, d_r$ regulate robot yawing, pitching and rolling motions respectively.</p><p>Inspired by the swimming characteristics of the boxfish where the swimming speed is roughly linear with the frequency and amplitude, we use $f_i, A_i$ to control the speed of the robot. Moreover, with the input $d_v$, the robot performs two basic swimming modes which are the PF model and the PF+BCF model. The details are as follows:</p><script type="math/tex; mode=display">f_{i}=\left\{\begin{array}{ll}c_{f, i}^{P F} d_{v}+f_{i, b}^{P F}, & \text { if } d_{v}^{i, \text { min }} \leq d_{v}<d_{v}^{\text {trans }} \\c_{f, i}^{P B C} d_{v}+f_{i, b}^{P B C}, & \text { if } d_{v}^{\text {trans }} \leq d_{v} \leq d_{v}^{i, \max } \\f_{i, \text { sat }}, & \text { otherwise. }\end{array}\right.</script><p>Nest, the combination of offset $X_i$’s is used for yaw, pitch and roll control of the robot. For the robot in this paper, the input drive $d_y$ turns the robot by providing offset of the caudal fin, $d_p$ denotes the attack angle of paired pectoral fins and makes the robot pitch and $d_r$ rolls the robot by taking the paired pectoral fins with a phase difference of $\pi$. The functional forms of $X_i$’s are given as:</p><script type="math/tex; mode=display">X_{1}=\left\{\begin{array}{l}d_{p}+\operatorname{sgn}\left(1+(-1)^{\operatorname{sgn}\left(d_{p}\right)}\right) d_{r} \\\operatorname{if} d_{p} \in[-0.5 \pi, 0] \cup[0,0.5 \pi] \cup\{\pi,-\pi\} \\d_{r} \in\{-0.5 \pi,-\pi, 0.5 \pi, \pi\} \\0, \text { otherwise. }\end{array}\right.</script><script type="math/tex; mode=display">X_{2}=\left\{\begin{array}{l}d_{p}+\operatorname{sgn}\left(1+(-1)^{\operatorname{sgn}\left(d_{p}\right)}\right)\left(d_{r}-\pi \operatorname{sgn}\left(d_{r}\right)\right) \\\text { if } d_{p} \in[-0.5 \pi, 0] \cup[0,0.5 \pi] \cup\{\pi,-\pi\} \\d_{r} \in\{-0.5 \pi,-\pi, 0.5 \pi, \pi\} \\0, \text { otherwise. }\end{array}\right.</script><script type="math/tex; mode=display">X_{3}=\left\{\begin{array}{lc}d_{y,} & \text { if } d_{y} \in[-\pi / 3, \pi / 3] \\0, & \text { otherwise }\end{array}\right.</script><p>The mapping table from the control parameter and multiple swimming pattern is shown below<br><img src="/images/CPG4Boxfish/mapping.png" alt></p><h2 id="Closed-loop-CPG-Model"><a href="#Closed-loop-CPG-Model" class="headerlink" title="Closed-loop CPG Model"></a>Closed-loop CPG Model</h2><p>To duplicate the ability of attitude stabilization in animals, we introduce sensory feedback into the CPG. In this paper, we only stabilize the yall and roll angles. As shown below, the closed-loop CPG contains four parts: the coupled oscillators, feedback signal generator, PID controller and onboard IMU. Correspondingly, the input drive becomes $d_{v}, d_{p}, d_{y}^{*}, d_{r}^{*}$ where $d_{y}^{*}, d_{r}^{*}$ denote the excepted yaw angle and roll angle respectively.</p><p>The process of the closed-loop CPG controller is described as follows. The onboard IMU records the actual yaw angle $y_{IMU}$ and roll angle $r_{IMU}$. Then according to the attitude error between the actual and the expected, the PID controller generates two signals $\lambda_y, \lambda_r$ serving as the input of the feedback signal.<br><img src="/images/CPG4Boxfish/feedback.png" alt><br>Next, we will give a detailed description of the proposed closed-loop CPG network.<br>First, the coupled oscillators containing the feedback signals are designed as follows:</p><script type="math/tex; mode=display">\begin{aligned}\dot{a}_{i} &=\alpha\left(A_{i}-a_{i}+u_{i}\right) \\\dot{x}_{i} &=\beta\left(X_{i}-x_{i}+v_{i}\right) \\\dot{\phi}_{i} &=2 \pi f_{i}+\sum_{j \in T_{i}} \mu_{i j}\left(\phi_{j}-\phi_{i}-\varphi_{i j}\right) \\\theta_{i} &=x_{i}+a_{i} \cos \left(\phi_{i}\right)\end{aligned}</script><p>Then, based on the force analysis, the feedback signal generators are mathematically defined as follows:</p><script type="math/tex; mode=display">\begin{array}{l}u_{1}=A_{1}\left(0.5-\lambda_{r}\right)-A_{1} \\u_{2}=A_{2}\left(0.5+\lambda_{r}\right)-A_{2} \\u_{3}=0 \\v_{1}=0.5 \pi \operatorname{sgn}\left(1+(-1)^{\operatorname{sgn}\left(d_{p}\right)}\right)-X_{1} \\v_{2}=0.5 \pi \operatorname{sgn}\left(1+(-1)^{\operatorname{sgn}\left(d_{p}\right)}\right)-X_{2} \\v_{3}=\lambda_{y}-X_{3}\end{array}</script><p>To stabilize the roll angle of the robot, we need to keep the produced forces on two sides the same magnitude. Thus, the offsets of the paired fins are equal( so $v_i$’s are the same ). By controlling the amplitude, we can control the speed, so we can control $u_i$.</p><h1 id="Experiments"><a href="#Experiments" class="headerlink" title="Experiments"></a>Experiments</h1><p>This paper conducts experiments on the control of pitching, and rolling angle and also makes the robot track the yaw angle in a sine wave.  More details can be found in the paper</p><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>In this paper, a two-layer CPG model is proposed. Using IMU as feedback, combined with the dynamic of the fish robot, the robot can perform specific locomotion in which the yaw angle, the roll angle and pitch angle can be controlled. The feedback signal can modulate the location of the limit cycle by changing the magnitude of offset($x_i$) and amplitude($a_i$)</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1] Vision-based target tracking and collision avoidance for two autonomous<br>robotic fish</p><p>[2]Dynamic modeling of an ostraciiform robotic fish based on angle of attack theory</p><p>[3]Controlling swimming and crawling in a fish robot using a central pattern generator</p>]]></content>
      
      
      <categories>
          
          <category> Paper notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPG </tag>
            
            <tag> Biofish </tag>
            
            <tag> Closed-loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPG_for_Unstructured_Terrain</title>
      <link href="/2022/09/12/CPG-for-unstructured-terrain/"/>
      <url>/2022/09/12/CPG-for-unstructured-terrain/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference: Central pattern generator with inertial feedback for stable locomotion and climbing in unstructured terrain</p></blockquote><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>Incorporating sensory feedback for gait adaptation in CPG models can improve the locomotive performance of robots in challenging terrain. In this paper, we present a novel approach for incorporating inertial feedback into the CPG framework for locomotion on steep, unstructured terrain. That is, we adapt the limit cycle of each leg of the robot to produce locomotion and posture control. The control frame is validated on a hexapod robot to walk in a variety of steep, challenging terrains.<br><span id="more"></span></p><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>This paper presents a new method to incorporate inertial feedback into bio-inspired CPG in order to implement reactive posture correction directly as part of the locomotion. Usually, CPGs do not rely on sensory inputs to produce locomotive outputs, but the outputs are adapted based on environmental information. Namely, sensory input is used to adapt the gait produced by the CPG by inhibiting or extenuating certain gait characteristics. A handful of recent works have implemented closed-loop CPG implementations based on various sensory feedback. However, CPG-based modeling still lacks generic methodologies for integrating sensory feedback to adapt the locomotion.</p><p>In this paper, we present a method for adapting CPG based on inertial feedback to make CoG positioned more centrally within the support polygon. </p><h1 id="CPG-Modeling"><a href="#CPG-Modeling" class="headerlink" title="CPG Modeling"></a>CPG Modeling</h1><p>The model is:</p><script type="math/tex; mode=display">\left\{\begin{aligned}\dot{x}_{i}(t)=&-\omega \cdot y_{i}(t)+\gamma\left(\mu^{2}-\sqrt{x_{i}(t)^{2}+y_{i}(t)^{2}}\right) \cdot x_{i}(t) \\\dot{y}_{i}(t)=&+\omega \cdot x_{i}(t)+\gamma\left(\mu^{2}-\sqrt{x_{i}(t)^{2}+y_{i}(t)^{2}}\right) \cdot y_{i}(t) \\&+\left(\lambda \sum_{j} K_{i j} y_{j}(t)\right)\end{aligned}\right. \tag{1}</script><p>where $\mu$ defines the radius of the limit cycle,$\omega$ defines the angular frequency of oscillation, $\gamma$ defines the forcing to the limit cycle, $\lambda$ defines the coupling strength and K defines the gait by setting the phase relationship between legs.</p><p>In CPG, the limit cycle defines a closed path in the joint space, which leads to the trajectory of the robots’ end-effectors. In this work, the limit cycle is in the shape of superellipse, which reads:</p><script type="math/tex; mode=display">H(x, y)=\left|\frac{x}{a}\right|^{d}+\left|\frac{y}{b}\right|^{d}\tag{2}</script><p>When d =2, H is an elliptic limit cycle, whereas $d&gt;2$ provides a more rectangular limit cycle as d increases. In general, the choice of $d$ should be guided by the type of terrain the robot will evolve in: $d=2$ seems to allow quick and stable locomotion on flat ground, whereas $d=4$ seems better suited for rough or inclined terrain. The following figure compares $d=2$ and $d=4$.</p><p><img src="/images/limit_cycle.png" alt></p><p>Then the CPG model can employ the new limit cycle $H(x,y)$ and obtain:</p><script type="math/tex; mode=display">\left\{\begin{aligned}\dot{x_{i}}(t)=&-\omega \cdot \partial H_{y_{i}}+\gamma\left(1-H\left(x_{i}(t), y_{i}(t)\right)\right) \cdot \partial H_{x_{i}} \\\dot{y}_{i}(t)=&+\omega \cdot \partial H_{x_{i}}+\gamma\left(1-H\left(x_{i}(t), y_{i}(t)\right)\right) \cdot \partial H_{y_{i}} \\&+\left(\lambda \sum_{j} K_{i j} y_{j}(t)\right)\end{aligned}\right.\tag{3}</script><p>Where in this case, $\omega$ does not directly translate to the gait period, instead linearly linked to the gait period.</p><p>In order to  incorporate inertial inertial feedback for body control, we consider offsets $c_x$ and $c_y$ as the center of the limit cycle by defining:</p><script type="math/tex; mode=display">H_{c}(x, y)=\left|\frac{x-c_{x}}{a}\right|^{n}+\left|\frac{y-c_{y}}{b}\right|^{n}\tag{4}</script><p>Finally as i denotes the $i$ th leg, we can get the following modified CPG equations:</p><script type="math/tex; mode=display">\left\{\begin{aligned}\dot{x}_{i}(t)=&-\omega \cdot \partial H_{y_{i}}+\gamma\left(1-H_{c_{i}}\left(x_{i}(t), y_{i}(t)\right)\right) \cdot \partial H_{x_{i}} \\\dot{y}_{i}(t)=&+\omega \cdot \partial H_{x_{i}}+\gamma\left(1-H_{c_{i}}\left(x_{i}(t), y_{i}(t)\right)\right) \cdot \partial H_{y_{i}} \\&+\left(\lambda \sum_{j} K_{i j}\left(y_{j}(t)-c_{y, j}\right)\right.\end{aligned}\right.\tag{5}</script><p>With $\partial H_{\zeta}=\frac{\partial H_{c_{i}}}{\partial \zeta}\left(x_{i}(t), y_{i}(t)\right)<br>$</p><p>In this work, the offsets $c_{x, i}, c_{y, i}$ will be used to achieve body control during the locomotion of the robot while preserving the step heights and forward speed. More specifically, the $c_y$ is adapted to achieve body posture control by updating the vertical control of the robot’s shoulder, and the $c_{x}$ is only set initially to adjust the spread of the legs. Note that the limit cycle only translates in the joint space of the associated leg, meaning that the limit cycle’s shape and scale stay the same.</p><h1 id="Inertial-Posture-Control"><a href="#Inertial-Posture-Control" class="headerlink" title="Inertial Posture Control"></a>Inertial Posture Control</h1><p>This section introduces the approach to body posture control, which adapts the limit cycle of each leg at each time step, based on inertial feedback. We first present our method for computing the end-effector error, such that correcting the body will have achieved the desired orientation. Then we detail the approach to adapting the vertical CPG offsets from the end-effector error.</p><h2 id="A-Computing-CPG-Offsets-Using-end-effector-Error"><a href="#A-Computing-CPG-Offsets-Using-end-effector-Error" class="headerlink" title="A.Computing CPG Offsets Using end-effector Error"></a>A.Computing CPG Offsets Using end-effector Error</h2><p>In this part, we try to make the attitude level, so we rotate the robot and use inverse kinematics to change the joint space trajectory.<br><img src="/images/hexo/hexo_robot.png" alt></p><p>Denote $e=\tilde{r}-r$. With discrete kinematics equation, we can get:</p><script type="math/tex; mode=display">\frac{e}{\Delta t}=J*\frac{\Delta\theta_e}{\Delta t}\tag{6}</script><h2 id="B-Adaptation-of-CPG-Parameters-for-Body-Posture-Control"><a href="#B-Adaptation-of-CPG-Parameters-for-Body-Posture-Control" class="headerlink" title="B.Adaptation of CPG Parameters for Body Posture Control"></a>B.Adaptation of CPG Parameters for Body Posture Control</h2><p>The figure of hexapod leg configuration is as followed:<br><img src="/images/hexo/leg_config.png" alt></p><p>So the first row of $\Delta \theta_e$ is of interest, as they influence $c_x$ and $c_y$. Since the body control aims at keeping the attitude level instead of changing the robot heading direction, the first row of $\Delta \theta_e$  should be 0. By contrast, the second row of $\Delta \theta_e$  should be integrated with time to change $c_y(t)$:</p><script type="math/tex; mode=display">c_{y}(t)=c_{y_{0}}+\int_{0}^{t} \Delta \theta_{e}(t) d t\tag{7}</script><p>We additionally incorporate the change inro CPG Eq.(5), which finally read:</p><script type="math/tex; mode=display">\left\{\begin{aligned}\dot{x_{i}}(t)=&-\omega \cdot \partial H_{y_{i}}+\gamma\left(1-H_{c_{i}(t)}\left(x_{i}(t), y_{i}(t)\right)\right) \cdot \partial H_{x_{i}} \\\dot{y_{i}}(t)=&+\omega \cdot \partial H_{x_{i}}+\gamma\left(1-H_{c_{i}(t)}\left(x_{i}(t), y_{i}(t)\right)\right) \cdot \partial H_{y_{i}} \\&+\left(\lambda \sum_{j} K_{i j}\left(y_{j}(t)-c_{y, j}\right)+\Delta \theta_{e_{2, i}}(t)\right.\end{aligned}\right.\tag{8}</script><h1 id="Hardware-Experiments"><a href="#Hardware-Experiments" class="headerlink" title="Hardware Experiments"></a>Hardware Experiments</h1><p>Joints angles are set based on the CPG outputs as follows:</p><script type="math/tex; mode=display">\left\{\begin{aligned}\theta_{1, i} &=x_{i} \\\theta_{2, i} &=\max \left(y_{i}, c_{y, i}\right) \\\theta_{3, i} &=f\left(\theta_{1, i}, \theta_{2, i}\right)\end{aligned}\right.\tag{9}</script><p>The proximal joint takes the x-output. And for the intermediate joint, we assume that $y_i&lt;c_{y, i}$ defines the legs are on the ground, so we use a max function to maintain a constant body height throughout the stance phase. For the distal joint, the inverse kinematic function is used to make the end-effectors remain at a constant, desired distance from the body.</p><h1 id="Discussion"><a href="#Discussion" class="headerlink" title="Discussion"></a>Discussion</h1><p>Inertial-based body control improves locomotive performance in two ways, which are the increase in locomotion speed and adapting to more extreme slopes. Locomotive performance increases for several reasons:</p><ol><li>Leveling the body reduces the load on the lateral, proximal joints that are responsible for propelling the body forward.</li><li>Make the CoG more centrally within the support polygon formed by grounded legs.</li><li>This body orientation prevents the robot from tipping while stepping on or off an obstacle.</li></ol><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This paper integrates body posture as a feedback signal within the CPG framework. Use the attitude angle as the error to modulate the CPG limit cycle in order to make the body posture level. They use a Hopf-based model with changes in the shape of the limit cycle (superellipse) and offsets.</p>]]></content>
      
      
      <categories>
          
          <category> Paper notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPG </tag>
            
            <tag> Legged Robot </tag>
            
            <tag> Closed-loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cpg_Biped</title>
      <link href="/2022/09/12/cpg-biped/"/>
      <url>/2022/09/12/cpg-biped/</url>
      
        <content type="html"><![CDATA[<blockquote><p>reference: Central pattern generator inspired control for adaptive walking of biped robots</p></blockquote><h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>This paper deals with the adaptive walking control of biped robots. Use CPGs to generate the CoG trajectory and a workspace trajectory modulation process. Also, the generator can use feedback to modulate CoG trajectories and workspace trajectories. A motion engine maps trajectories from workspace to joint space. We use the NAO platform to confirm the effectiveness of the proposed control strategy.</p><span id="more"></span><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The main contributions of this paper:</p><ol><li>A CoG trajectory generation method is proposed based on CPGs, A mapping function is designed to map the output signals of CPGs to 3-D CoG trajectories online for a biped robot.</li><li>A workspace trajectory modulator is designed based on CoG trajectories. The generated CoG trajectories are used to modulate the workspace trajectories to realize adaptive walking.</li><li>Through the mutual entrainment of CPGs with the feedback signals of the robot, the adaptive CoG trajectories and workspace trajectories can be generated online.</li><li>The proposed control strategy is validated using the biped robot NAO.</li></ol><h1 id="Control-Architecture"><a href="#Control-Architecture" class="headerlink" title="Control Architecture"></a>Control Architecture</h1><p><img src="/images/control.png" alt><br>The control system architecture consists of a trajectory generator and a motion engine. The paper uses feedback information along with function mapping to generate CoG trajectory. Then the CoG output can modulate the workspace generator. And finally, the workspace trajectory can generate the joint signals.</p><h1 id="CPG-Inspired-Trajectory-Generator"><a href="#CPG-Inspired-Trajectory-Generator" class="headerlink" title="CPG-Inspired Trajectory Generator"></a>CPG-Inspired Trajectory Generator</h1><p>The mapping function is designed to transform the output of the CPGs to CoG trajectories. The amplitude and period of CoG trajectories can modulate the workspace trajectories. The objectives of the trajectories are as followed:</p><ol><li>Generation of CoG</li><li>Generation of workspace trajectories</li><li>Entraining with feedback information</li></ol><h2 id="A-CoG-Trajectory-Generation"><a href="#A-CoG-Trajectory-Generation" class="headerlink" title="A.CoG Trajectory Generation"></a>A.CoG Trajectory Generation</h2><p>1) CPG Model<br>In this paper, Kimura’s oscillator is modified and used as a CPG medel<br>$$\begin{aligned}T_{r} \dot{u}_{i}^{\{e, f\}}=&-u_{i}^{\{e, f\}}-w_{f e} r_{i}^{\{f, e\}}-\beta v_{i}^{\{e, f\}}+s_{0} \\&+\sum_{j=1}^{n} w_{i j} r_{j}^{\{e, f\}}+f e e d_{i}^{\{e, f\}} \\T_{a} \dot{v}_{i}^{\{e, f\}}=&-v_{i}^{\{e, f\}}+r_{i}^{\{e, f\}} \\r_{i}^{\{e, f\}}=& \max \left(u_{i}^{\{e, f\}}, 0\right) \\r_{i} &=-u_{i}^{\{e\}}+u_{i}^{\{f\}}\end{aligned} $$2) Mapping Function Design$$\begin{array}{l}\mathrm{CoG}_{x}=o f f_{x}+K_{x}\left(r_{1}+f(t)\right) \\\mathrm{CoG}_{y}=o f f_{y}+K_{y} r_{2} \\\mathrm{CoG}_{z}=o f f_{z}+K_{z} r_{3}\end{array}$$<br>where off are offsets, K are translation gains, and r are output signals of the CPG units, f(t) is the basic ramp function.</p><h2 id="B-Workspace-Trajectory-Modulation"><a href="#B-Workspace-Trajectory-Modulation" class="headerlink" title="B.Workspace Trajectory Modulation"></a>B.Workspace Trajectory Modulation</h2><p>The trajectory of the swingfoot, as shown following, is generated by a rolling circle, which is represented by</p><script type="math/tex; mode=display">\begin{array}{l}p_{x}=a(\theta-\sin \theta) \\p_{z}=a(1-\cos \theta)\end{array}</script><p><img src="/images/circle.png" alt><br>The position of each toe on the predesigned workspace trajectory is given as functions the the state of the CoG trajectory as follows:</p><script type="math/tex; mode=display">\left\{\begin{aligned}x_{\text {locus }}(i)=& A m p_{\mathrm{CoG}_{\mathrm{x}}}(i)\times\left(\frac{2 \pi \cdot t_{s(\text { index })}}{t_{s}}-\sin \left(2 \pi \cdot t_{s(\text { index })} / t_{s}\right)\right) \\z_{\text {locus }}(i)=& A m p_{\operatorname{CoG}_{\mathrm{x}}}(i) \times\left(1-\cos \left(2 \pi \cdot t_{s(\text { index })} / t_{s}\right)\right)\end{aligned}\right.</script><p>Where $Amp_{Cog}$ is the step length(<em>in my view, it is the _height of _the _step__, but_ the paper says the step length</em>).$t_s$ is the during of the swing phase. With the following pictures, we can understand more clearly.</p><p><img src="/images/CoG.png" alt><br><img src="/images/y.png" alt><br>Thus, through the modulation of the amplitude, $Amp_{CoG}$, the cyclic periods $t_c$ and the parameter $r_d$, we can modulate the step height, step length and duration periods of swinging and supporting phases.</p><blockquote><p>This paper uses the attitude angle as feed back to make the robot walk on a slope.</p></blockquote><h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>This paper uses CPGs(Kimura model) to generate a reference CoG trajectory and then modulates the foot trajectory and finally generates the joint trajectory.<br>In short, this paper uses CPG to generate foot trajectory and the role of feedback is to modulate step length and step height.</p>]]></content>
      
      
      <categories>
          
          <category> Paper notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPG </tag>
            
            <tag> Legged Robot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
